// src/bot/scenes/createLotScene.ts
import {Scenes, Markup} from 'telegraf';
import dayjs from 'dayjs';
import customParseFormat from 'dayjs/plugin/customParseFormat';
import utc from 'dayjs/plugin/utc';
import {User, Lot} from '../../db/models';
import {ILot} from '../../interfaces/ILot';
import {handleStartCommand} from "../commands/start";


interface WizardState extends Omit<ILot, 'publishTime' | 'stopValue'> {
  selectedChannels?: string[];
  validChannels?: { id: string; title: string }[];
  publishChannelId?: string;
  publishTime?: Date;
  stopValueDate?: Date;
  stopValueCount?: number;
}

const EXIT_KEYWORDS = [
  '/start', '/new_lot', '/my_lots', '/my_channels',
  'üÜï New Lot', 'üì¶ My Lots', 'üì° My Channels'
];

dayjs.extend(utc);
dayjs.extend(customParseFormat);

export const createLotScene = new Scenes.WizardScene(
  'create-lot-wizard',

  // STEP 1 ‚Äî Lot name
  async (ctx) => {
    await ctx.reply('üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞:', Markup.inlineKeyboard([
      Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', 'cancel')
    ], {columns: 2}));
    return ctx.wizard.next();
  },

  // STEP 2 ‚Äî Start text
  async (ctx) => {
    // @ts-ignore
    const text = ctx.message?.text?.trim();

    if (text === 'cancel') {
      await ctx.answerCbQuery();
      await ctx.scene.leave();
      return handleStartCommand(ctx);
    }

    if (!text) {
      await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–æ—Ç–∞.');
      return;
    }
    (ctx.wizard.state as WizardState).name = text;
    await ctx.reply(
      'üèÅ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–æ–¥–Ω–æ* –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF). ' +
      '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ, –¥–æ–±–∞–≤—å—Ç–µ –∫ –Ω–µ–º—É –ø–æ–¥–ø–∏—Å—å ‚Äî –æ–Ω–∞ —Å—Ç–∞–Ω–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º –ª–æ—Ç–∞. ' +
      '–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –±–µ–∑ –º–µ–¥–∏–∞, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ –º–µ–¥–∏–∞-–ø—Ä–µ–≤—å—é.',
      Markup.inlineKeyboard([
        Markup.button.callback('–ù–∞–∑–∞–¥', 'go_back'),
        Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', 'cancel')
      ], {columns: 2})
    );
    return ctx.wizard.next();
  },

  // STEP 3 ‚Äî Capture start text
  async (ctx) => {
    // @ts-ignore
    const msg = ctx.message;
    let fileId: string | null = null;
    let text: string | undefined;
    let mediaType: 'photo' | 'video' | 'animation' | undefined = undefined;

    // @ts-ignore
    if ('text' in msg && msg.text === 'go_back') {
      await ctx.answerCbQuery();
      // @ts-ignore
      return ctx.wizard.select(1);
    }

    // @ts-ignore
    if ('text' in msg && msg.text === 'go_back') {
      await ctx.answerCbQuery();
      await ctx.scene.leave();
      return handleStartCommand(ctx);
    }

    // 1) If it's media, capture its file_id
    // @ts-ignore
    if ('photo' in msg && msg.photo) {
      const photos = msg.photo;
      fileId = photos[photos.length - 1].file_id;
      mediaType = 'photo';
    } else { // @ts-ignore
      if ('video' in msg && msg.video) {
        fileId = msg.video.file_id;
        mediaType = 'video';
      } else { // @ts-ignore
        if ('animation' in msg && msg.animation) {
          fileId = msg.animation.file_id;
          mediaType = 'animation';
        }
      }
    }

    // 2) If there's a caption or plain text, capture that as startText
    // @ts-ignore
    text = ('caption' in msg && msg.caption)
      ? msg.caption.trim()
      // @ts-ignore
      : ('text' in msg && msg.text)
        ? msg.text.trim()
        : undefined;
    if (!fileId && !text) {
      await ctx.reply('‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç.');
      return;
    }
    if (EXIT_KEYWORDS.includes(text!)) {
      await ctx.scene.leave();
      return ctx.reply('–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ—Ç–∞.');
    }
    const state = ctx.wizard.state as WizardState;
    state.startMedia = fileId ?? undefined;
    state.startText = text ?? '';
    state.mediaType = mediaType;

    await ctx.reply(
      '‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω:',
      Markup.inlineKeyboard([
        [Markup.button.callback('Participate', 'btnText:Participate')],
        [Markup.button.callback('–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å', 'btnText:–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å')],
        [Markup.button.callback('Ishtirok etish', 'btnText:Ishtirok etish')],
        [Markup.button.callback('–ù–∞–∑–∞–¥', 'go_back')],
        [Markup.button.callback('–û—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ', 'cancel')]
      ])
    );
    return ctx.wizard.next();
  },

  // STEP 4 ‚Äî Button text & channel selection
  async (ctx) => {
    const state = ctx.wizard.state as WizardState;
    // @ts-ignore
    const cb = ctx.callbackQuery?.data;
    // @ts-ignore
    const text = !cb ? ctx.message?.text?.trim() : undefined;

    if (cb?.startsWith('btnText:')) {
      state.participateBtnText = cb.split(':')[1];
      await ctx.answerCbQuery();
      await ctx.reply(`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "${state.participateBtnText}"`);
    } else if (text) {
      state.participateBtnText = text;
      await ctx.reply(`–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: "${state.participateBtnText}"`);
    } else {
      return;
    }

    // Channels for participation
    state.selectedChannels = [];
    state.validChannels = [];
    const user = await User.findOne({telegramId: ctx.from!.id}).populate('channels');
    const botId = (await ctx.telegram.getMe()).id;
    for (const ch of (user!.channels as any[])) {
      try {
        const admins = await ctx.telegram.getChatAdministrators(ch.telegramId);
        if (admins.some(a => a.user.id === botId)) {
          state.validChannels!.push({id: ch._id.toString(), title: ch.title || ch.username || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'});
        }
      } catch {
      }
    }
    if (!state.validChannels!.length) {
      await ctx.reply('‚ùó –£ –≤–∞—Å –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤, –≥–¥–µ –±–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º.');
      return ctx.scene.leave();
    }
    const buttons = state.validChannels!.map(ch =>
      Markup.button.callback(`‚ùå ${ch.title}`, `toggle_channel:${ch.id}`)
    );
    buttons.push(Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'channels_done'));
    await ctx.reply('üì° –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è —É—á–∞—Å—Ç–∏—è:', Markup.inlineKeyboard(buttons, {columns: 2}));
    return ctx.wizard.next();
  },

  // STEP 5 ‚Äî Toggle channels & ask publish-channel
  async (ctx) => {
    // @ts-ignore
    const data = ctx.callbackQuery?.data;
    if (!data) return;
    const state = ctx.wizard.state as WizardState;

    if (data.startsWith('toggle_channel:')) {
      const id = data.split(':')[1];
      const sel = state.selectedChannels!;
      const idx = sel.indexOf(id);
      if (idx === -1) sel.push(id); else sel.splice(idx, 1);
      const buttons = state.validChannels!.map(ch => {
        const prefix = sel.includes(ch.id) ? '‚úÖ' : '‚ùå';
        return Markup.button.callback(`${prefix} ${ch.title}`, `toggle_channel:${ch.id}`);
      });
      buttons.push(Markup.button.callback('‚úÖ –ì–æ—Ç–æ–≤–æ', 'channels_done'));
      await ctx.editMessageReplyMarkup(Markup.inlineKeyboard(buttons, {columns: 2}).reply_markup!);
      await ctx.answerCbQuery();
      return;
    }

    if (data === 'channels_done') {
      await ctx.answerCbQuery();
      const picked = state.selectedChannels!;
      const titles = state.validChannels!
        .filter(ch => picked.includes(ch.id))
        .map(ch => ch.title);
      await ctx.reply(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª—ã: ${titles.join(', ')}`);

      const channelIds = picked.length ? picked : state.validChannels!.map(ch => ch.id);
      const publishButtons = state.validChannels!
        .filter(ch => channelIds.includes(ch.id))
        .map(ch => Markup.button.callback(ch.title, `publish_channel:${ch.id}`));
      await ctx.reply('üì¢ –í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–æ—Ç?', Markup.inlineKeyboard(publishButtons, {columns: 1}));
      return ctx.wizard.next();
    }
  },

  // STEP 6 ‚Äî Publish channel & ask winners count
  async (ctx) => {
    // @ts-ignore
    const data = ctx.callbackQuery?.data;
    if (!data?.startsWith('publish_channel:')) return;
    await ctx.answerCbQuery();
    const [, id] = data.split(':');
    const state = ctx.wizard.state as WizardState;
    state.publishChannelId = id;
    await ctx.reply('üèÜ –°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –±—É–¥–µ—Ç? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:');
    return ctx.wizard.next();
  },

  // STEP 7 ‚Äî Winners count & ask publish time
  async (ctx) => {
    // @ts-ignore
    const text = ctx.message?.text?.trim();
    const n = Number(text);
    if (!text || isNaN(n) || n < 1) {
      await ctx.reply('‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π.');
      return;
    }
    const state = ctx.wizard.state as WizardState;
    state.winnersCount = n;
    await ctx.reply(
      'üïë –ö–æ–≥–¥–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ª–æ—Ç? –ù–∞–∂–º–∏—Ç–µ ¬´–°–µ–π—á–∞—Å¬ª –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É DD.MM.YY HH:MM:',
      Markup.inlineKeyboard([[Markup.button.callback('–°–µ–π—á–∞—Å', 'publish_time:now')]])
    );
    return ctx.wizard.next();
  },

  // STEP 8 ‚Äî Publish time & ask stop condition
  async (ctx) => {
    const state = ctx.wizard.state as WizardState;
    // @ts-ignore
    const cb = ctx.callbackQuery?.data;
    if (cb === 'publish_time:now') {
      state.publishTime = dayjs().utc().add(1, 'minute').toDate();
      await ctx.answerCbQuery();
    } else {
      // @ts-ignore
      const text = ctx.message?.text?.trim();
      const re = /^\d{2}\.\d{2}\.\d{4}\s\d{2}:\d{2}$/;
      if (!text || !re.test(text)) {
        await ctx.reply('‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω. DD.MM.YYYY HH:MM.');
        return;
      }
      state.publishTime = dayjs(text, 'DD.MM.YYYY HH:mm').subtract(5, 'hour').toDate();
    }
    await ctx.reply(
      '‚èπ –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ª–æ—Ç?',
      Markup.inlineKeyboard([
        [Markup.button.callback('–ü–æ –≤—Ä–µ–º–µ–Ω–∏', 'stop_by:time')],
        [Markup.button.callback('–ü–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º', 'stop_by:count')]
      ])
    );
    return ctx.wizard.next();
  },

  // STEP 9 ‚Äî Stop condition & ask detail
  async (ctx) => {
    // @ts-ignore
    const data = ctx.callbackQuery?.data;
    if (!data?.startsWith('stop_by:')) return;
    await ctx.answerCbQuery();
    const [, type] = data.split(':');
    const state = ctx.wizard.state as WizardState;
    state.stopType = type as any;
    if (type === 'time') {
      await ctx.reply('‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è DD.MM.YYYY HH:MM:');
    } else {
      await ctx.reply('üî¢ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:');
    }
    return ctx.wizard.next();
  },

  // STEP 10 ‚Äî Stop value & ask announcement
  async (ctx) => {
    const state = ctx.wizard.state as WizardState;
    // @ts-ignore
    const text = ctx.message?.text?.trim();
    if (!text) return;
    if (state.stopType === 'time') {
      const re = /^\d{2}\.\d{2}\.\d{4}\s\d{2}:\d{2}$/;
      if (!re.test(text)) {
        await ctx.reply('‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. DD.MM.YYYY HH:MM.');
        return;
      }
      state.stopValueDate = dayjs(text, 'DD.MM.YYYY HH:mm').subtract(5, 'hour').toDate();
    } else {
      const num = Number(text);
      if (isNaN(num) || num < 1) {
        await ctx.reply('‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.');
        return;
      }
      state.stopValueCount = num;
    }
    await ctx.reply(
      'üîî –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ^winners^ –¥–ª—è —Å–ø–∏—Å–∫–∞.'
    );
    return ctx.wizard.next();
  },

  // STEP 11 ‚Äî Announcement & summary
  async (ctx) => {
    // @ts-ignore
    const text = ctx.message?.text;
    if (!text || !text.includes('^winners^')) {
      await ctx.reply('‚ùó –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å ^winners^.');
      return;
    }
    const state = ctx.wizard.state as WizardState;
    state.announceTemplate = text;
    const lines: string[] = [];
    lines.push(`–ù–∞–∑–≤–∞–Ω–∏–µ: ${state.name}`);
    lines.push(`–°—Ç–∞—Ä—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç: ${state.startText}`);
    lines.push(`–ö–Ω–æ–ø–∫–∞: ${state.participateBtnText}`);
    const parts = state.validChannels!
      .filter(ch => state.selectedChannels!.includes(ch.id))
      .map(ch => ch.title);
    lines.push(`–£—á–∞—Å—Ç–∏–µ: ${parts.join(', ') || '–ë–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'}`);
    const pubCh = state.validChannels!.find(ch => ch.id === state.publishChannelId!);
    lines.push(`–ü—É–±–ª–∏–∫–∞—Ü–∏—è: ${pubCh?.title || '–ë–µ–∑ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'}`);
    lines.push(`–ü–æ–±–µ–¥–∏—Ç–µ–ª–∏: ${state.winnersCount}`);
    lines.push(`–ü—É–±–ª–∏–∫–∞—Ü–∏—è: ${dayjs(state.publishTime).add(5, 'hour').format('DD.MM.YY HH:mm')}`);
    if (state.stopType === 'time') {
      lines.push(`–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: ${dayjs(state.stopValueDate).add(5, 'hour').format('DD.MM.YY HH:mm')}`);
    } else {
      lines.push(`–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º: ${state.stopValueCount}`);
    }
    lines.push(`–®–∞–±–ª–æ–Ω: ${state.announceTemplate}`);

    await ctx.reply(lines.join('\n'),
      Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –û–ö', 'lot_confirm:ok')],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'lot_confirm:cancel')]
      ])
    );
    return ctx.wizard.next();
  },

  // STEP 12 ‚Äî Confirmation & persistence
  async (ctx) => {
    // @ts-ignore
    const data = ctx.callbackQuery?.data;
    if (!data?.startsWith('lot_confirm:')) return;
    await ctx.answerCbQuery();
    if (data.endsWith(':cancel')) {
      await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
      return ctx.scene.leave();
    }

    // OK ‚Üí save
    const state = ctx.wizard.state as WizardState;
    const newLot = await Lot.create({
      name: state.name!,
      startText: state.startText!,
      startMedia: state.startMedia!,
      mediaType: state.mediaType!,
      participateBtnText: state.participateBtnText!,
      channels: state.selectedChannels!,
      publishChannel: state.publishChannelId!,
      winnersCount: state.winnersCount!,
      publishTime: state.publishTime!,
      winners: [],
      participants: [],
      stopType: state.stopType!,
      stopCount: state.stopValueCount!,
      stopDate: state.stopValueDate!,
      announceTemplate: state.announceTemplate!
    });

    await User.findOneAndUpdate({telegramId: ctx.from?.id}, {
      $push: {lots: newLot._id}
    })

    await ctx.reply('üéâ –õ–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!');
    return ctx.scene.leave();
  }
);
