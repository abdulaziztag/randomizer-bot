import { Scenes } from 'telegraf';
import { isTextMessage } from '../../helpers/isTextMessage';
import { Channel, User } from '../../db/models';

export const addChannelScene = new Scenes.WizardScene(
  'add-channel-wizard',

  // Step 1: instructions
  async (ctx) => {
    await ctx.reply(
      `üì¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n\n` +
      `‚ûï –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ @${ctx.botInfo.username} –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n` +
      `üîó –ó–∞—Ç–µ–º:\n` +
      `‚Ä¢ –î–ª—è *–ø—É–±–ª–∏—á–Ω—ã—Ö* –∫–∞–Ω–∞–ª–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ @username –∫–∞–Ω–∞–ª–∞.\n` +
      `‚Ä¢ –î–ª—è *–ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö* –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –≥—Ä—É–ø–ø ‚Äî –ø–µ—Ä–µ—à–ª–∏—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç—Ç—É–¥–∞ —Å—é–¥–∞.`
    );
    return ctx.wizard.next();
  },

  // Step 2: wait for @username or forwarded message
  async (ctx) => {
    const from = ctx.from;
    if (!from) {
      await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.');
      return ctx.scene.leave();
    }

    const user = await User.findOne({ telegramId: from.id });
    if (!user) {
      await ctx.reply('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.');
      return ctx.scene.leave();
    }

    // 1) Forwarded message
    // 1) Forwarded message
    const fwd = (ctx.message as any)?.forward_from_chat;
    if (fwd) {
      const chatId = fwd.id;

      try {
        // Ensure bot can access the chat
        try {
          await ctx.telegram.getChat(chatId);
        } catch (err: any) {
          if (err.code === 403) {
            await ctx.reply('‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
            return;
          }
          throw err;
        }

        const admins = await ctx.telegram.getChatAdministrators(chatId);
        const botId = (await ctx.telegram.getMe()).id;

        const userIsAdmin = admins.some(a => a.user.id === from.id);
        const botIsAdmin = admins.some(a => a.user.id === botId);

        if (!userIsAdmin) {
          await ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.');
          return;
        }
        if (!botIsAdmin) {
          await ctx.reply(`‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ "${fwd.title}". –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`);
          return;
        }

        let channel = await Channel.findOne({ telegramId: chatId });
        if (!channel) {
          channel = await Channel.create({
            telegramId: chatId,
            title: fwd.title,
            username: fwd.username,
            type: fwd.type,
            addedBy: user._id
          });
        }

        if (!user.channels.includes(channel._id)) {
          user.channels.push(channel._id);
          await user.save();
        }

        await ctx.reply(`‚úÖ –ö–∞–Ω–∞–ª/–≥—Ä—É–ø–ø–∞ "${fwd.title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! \n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_lot`);
        return ctx.scene.leave();

      } catch (err) {
        console.error(err);
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–Ω–∞–ª. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }
    }
    // 2) Public @username
    if (isTextMessage(ctx.message)) {
      const input = ctx.message.text.trim();
      if (!input.startsWith('@')) {
        await ctx.reply('‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ @username. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.');
        return; // ‚Üê don't leave
      }

      try {
        const chat = await ctx.telegram.getChat(input);

        if (chat.type !== 'channel' && chat.type !== 'supergroup' && chat.type !== 'group') {
          await ctx.reply('‚ùå –≠—Ç–æ –Ω–µ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          return;
        }

        const admins = await ctx.telegram.getChatAdministrators(chat.id);
        const botId = (await ctx.telegram.getMe()).id;

        const userIsAdmin = admins.some(a => a.user.id === from.id);
        const botIsAdmin = admins.some(a => a.user.id === botId);

        if (!userIsAdmin) {
          await ctx.reply('‚ùå –í—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.');
          return;
        }

        if (!botIsAdmin) {
          await ctx.reply(`‚ùå –ë–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º –≤ "${chat.title}". –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ.`);
          return;
        }

        let channel = await Channel.findOne({ telegramId: chat.id });
        const username = 'username' in chat ? chat.username : '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

        if (!channel) {
          channel = await Channel.create({
            telegramId: chat.id,
            title: chat.title,
            username,
            type: chat.type,
            addedBy: user._id
          });
        }

        if (!user.channels.includes(channel._id)) {
          user.channels.push(channel._id);
          await user.save();
        }

        await ctx.reply(`‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª "${chat.title}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
        return ctx.scene.leave();

      } catch (err) {
        console.error(err);
        await ctx.reply('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫–∞–Ω–∞–ª–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }
    }

    // fallback: unknown message
    await ctx.reply('‚ö†Ô∏è –Ø –∂–¥—É –∏–ª–∏ @username, –∏–ª–∏ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞.');
    return;
  }
);